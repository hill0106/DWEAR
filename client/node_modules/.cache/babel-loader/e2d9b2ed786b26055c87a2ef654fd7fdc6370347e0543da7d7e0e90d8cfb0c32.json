{"ast":null,"code":"import Joi from 'joi';\n\n// pluralize\nconst p = (word, num = 0) => num === 1 ? word : `${word}s`;\nconst isPositive = (num = 0) => Number(num > 0);\nconst clamp = (value, min, max) => value < min ? min : value > max ? max : value;\nconst defaultOptions = {\n  min: 8,\n  max: 26,\n  lowerCase: 1,\n  upperCase: 1,\n  numeric: 1,\n  symbol: 1,\n  requirementCount: 4\n};\nvar index = ({\n  min = 0,\n  max = 0,\n  lowerCase = 0,\n  upperCase = 0,\n  numeric = 0,\n  symbol = 0,\n  requirementCount = 0\n} = defaultOptions, label = '{{#label}}') => {\n  const joiPasswordComplexity = {\n    type: 'passwordComplexity',\n    base: Joi.string(),\n    messages: {\n      'passwordComplexity.tooShort': `${label} should be at least ${min} ${p('character', min)} long`,\n      'passwordComplexity.tooLong': `${label} should not be longer than ${max} ${p('character', max)}`,\n      'passwordComplexity.lowercase': `${label} should contain at least ${lowerCase} lower-cased ${p('letter', lowerCase)}`,\n      'passwordComplexity.uppercase': `${label} should contain at least ${upperCase} upper-cased ${p('letter', upperCase)}`,\n      'passwordComplexity.numeric': `${label} should contain at least ${numeric} ${p('number', numeric)}`,\n      'passwordComplexity.symbol': `${label} should contain at least ${symbol} ${p('symbol', symbol)}`,\n      'passwordComplexity.requirementCount': `${label} must meet at least ${requirementCount} of the complexity requirements`\n    },\n    validate: (value, helpers) => {\n      const errors = [];\n      if (typeof value === 'string') {\n        const lowercaseCount = value.match(/[a-z]/g)?.length ?? 0;\n        const upperCaseCount = value.match(/[A-Z]/g)?.length ?? 0;\n        const numericCount = value.match(/[0-9]/g)?.length ?? 0;\n        const symbolCount = value.match(/[^a-zA-Z0-9]/g)?.length ?? 0;\n        const meetsMin = min && value.length >= min;\n        const meetsMax = max && value.length <= max;\n        const meetsLowercase = lowercaseCount >= lowerCase;\n        const meetsUppercase = upperCaseCount >= upperCase;\n        const meetsNumeric = numericCount >= numeric;\n        const meetsSymbol = symbolCount >= symbol;\n        const maxRequirement = isPositive(lowerCase) + isPositive(upperCase) + isPositive(numeric) + isPositive(symbol);\n        const requirement = clamp(requirementCount || maxRequirement, 1, maxRequirement);\n        const requirementErrors = [];\n        if (!meetsMin) errors.push(helpers.error('passwordComplexity.tooShort', {\n          value\n        }));\n        if (!meetsMax) errors.push(helpers.error('passwordComplexity.tooLong', {\n          value\n        }));\n        if (!meetsLowercase) {\n          requirementErrors.push(helpers.error('passwordComplexity.lowercase', {\n            value\n          }));\n        }\n        if (!meetsUppercase) {\n          requirementErrors.push(helpers.error('passwordComplexity.uppercase', {\n            value\n          }));\n        }\n        if (!meetsNumeric) {\n          requirementErrors.push(helpers.error('passwordComplexity.numeric', {\n            value\n          }));\n        }\n        if (!meetsSymbol) {\n          requirementErrors.push(helpers.error('passwordComplexity.symbol', {\n            value\n          }));\n        }\n        if (maxRequirement - requirementErrors.length < requirement) {\n          errors.push(...requirementErrors);\n          if (requirement < maxRequirement) {\n            errors.push(helpers.error('passwordComplexity.requirementCount', {\n              value\n            }));\n          }\n        }\n      }\n      return {\n        value,\n        errors: errors.length ? errors : null\n      };\n    }\n  };\n  return Joi.extend(joiPasswordComplexity).passwordComplexity();\n};\nexport { index as default };","map":{"version":3,"names":["Joi","p","word","num","isPositive","Number","clamp","value","min","max","defaultOptions","lowerCase","upperCase","numeric","symbol","requirementCount","index","label","joiPasswordComplexity","type","base","string","messages","validate","helpers","errors","lowercaseCount","match","length","upperCaseCount","numericCount","symbolCount","meetsMin","meetsMax","meetsLowercase","meetsUppercase","meetsNumeric","meetsSymbol","maxRequirement","requirement","requirementErrors","push","error","extend","passwordComplexity","default"],"sources":["/Users/alex87/Documents/Web/DWEAR/client/node_modules/joi-password-complexity/lib/index.es.js"],"sourcesContent":["import Joi from 'joi';\n\n// pluralize\nconst p = (word, num = 0) => (num === 1 ? word : `${word}s`);\nconst isPositive = (num = 0) => Number(num > 0);\nconst clamp = (value, min, max) => (value < min ? min : value > max ? max : value);\nconst defaultOptions = {\n    min: 8,\n    max: 26,\n    lowerCase: 1,\n    upperCase: 1,\n    numeric: 1,\n    symbol: 1,\n    requirementCount: 4,\n};\nvar index = ({ min = 0, max = 0, lowerCase = 0, upperCase = 0, numeric = 0, symbol = 0, requirementCount = 0, } = defaultOptions, label = '{{#label}}') => {\n    const joiPasswordComplexity = {\n        type: 'passwordComplexity',\n        base: Joi.string(),\n        messages: {\n            'passwordComplexity.tooShort': `${label} should be at least ${min} ${p('character', min)} long`,\n            'passwordComplexity.tooLong': `${label} should not be longer than ${max} ${p('character', max)}`,\n            'passwordComplexity.lowercase': `${label} should contain at least ${lowerCase} lower-cased ${p('letter', lowerCase)}`,\n            'passwordComplexity.uppercase': `${label} should contain at least ${upperCase} upper-cased ${p('letter', upperCase)}`,\n            'passwordComplexity.numeric': `${label} should contain at least ${numeric} ${p('number', numeric)}`,\n            'passwordComplexity.symbol': `${label} should contain at least ${symbol} ${p('symbol', symbol)}`,\n            'passwordComplexity.requirementCount': `${label} must meet at least ${requirementCount} of the complexity requirements`,\n        },\n        validate: (value, helpers) => {\n            const errors = [];\n            if (typeof value === 'string') {\n                const lowercaseCount = value.match(/[a-z]/g)?.length ?? 0;\n                const upperCaseCount = value.match(/[A-Z]/g)?.length ?? 0;\n                const numericCount = value.match(/[0-9]/g)?.length ?? 0;\n                const symbolCount = value.match(/[^a-zA-Z0-9]/g)?.length ?? 0;\n                const meetsMin = min && value.length >= min;\n                const meetsMax = max && value.length <= max;\n                const meetsLowercase = lowercaseCount >= (lowerCase);\n                const meetsUppercase = upperCaseCount >= (upperCase);\n                const meetsNumeric = numericCount >= (numeric);\n                const meetsSymbol = symbolCount >= (symbol);\n                const maxRequirement = isPositive(lowerCase) + isPositive(upperCase) +\n                    isPositive(numeric) + isPositive(symbol);\n                const requirement = clamp(requirementCount || maxRequirement, 1, maxRequirement);\n                const requirementErrors = [];\n                if (!meetsMin)\n                    errors.push(helpers.error('passwordComplexity.tooShort', { value }));\n                if (!meetsMax)\n                    errors.push(helpers.error('passwordComplexity.tooLong', { value }));\n                if (!meetsLowercase) {\n                    requirementErrors.push(helpers.error('passwordComplexity.lowercase', { value }));\n                }\n                if (!meetsUppercase) {\n                    requirementErrors.push(helpers.error('passwordComplexity.uppercase', { value }));\n                }\n                if (!meetsNumeric) {\n                    requirementErrors.push(helpers.error('passwordComplexity.numeric', { value }));\n                }\n                if (!meetsSymbol) {\n                    requirementErrors.push(helpers.error('passwordComplexity.symbol', { value }));\n                }\n                if (maxRequirement - requirementErrors.length < requirement) {\n                    errors.push(...requirementErrors);\n                    if (requirement < maxRequirement) {\n                        errors.push(helpers.error('passwordComplexity.requirementCount', { value }));\n                    }\n                }\n            }\n            return {\n                value,\n                errors: errors.length ? errors : null,\n            };\n        },\n    };\n    return Joi.extend(joiPasswordComplexity).passwordComplexity();\n};\n\nexport { index as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}